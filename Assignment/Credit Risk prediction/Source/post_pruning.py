# -*- coding: utf-8 -*-
"""Post_pruning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ToL1oE0iMaMVZTm7E52b1kLZ94DerPo3
"""

import pandas as pd
import numpy as np
from sklearn import  tree
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import cross_val_score

# Reading the training data
dataset = pd.read_csv("./Train.csv")

# Getting the dummies
one_hot_train = pd.get_dummies(dataset[['F10', 'F11']])
train_ = pd.concat([dataset['F1'],dataset['F2'] ,dataset['F3'], dataset['F4'],dataset['F5'], dataset['F6'] ,dataset['F7'], dataset['F8'], dataset['F9'], one_hot_train], axis =1)

#Initializing the classifier
classifier = tree.DecisionTreeClassifier()

# Training the classifier
classifier_train=classifier.fit(train_, dataset['credit'])

# Claculating the Cost Complexity Parameter and removing the maximum value 
path = classifier.cost_complexity_pruning_path(train_, dataset['credit'])
ccp_alphas = path.ccp_alphas
ccp_alphas = ccp_alphas[:-1] #remove max value of alpha
clfs = []
for ccp_alpha in ccp_alphas:
    clf = DecisionTreeClassifier(random_state=42, ccp_alpha=abs(ccp_alpha))
    clf.fit(train_, dataset['credit'])
    clfs.append(clf)

# Plotting the mean CCP value.
alpha_loop = []
for ccp_alpha in ccp_alphas:
    dt_dtc = tree.DecisionTreeClassifier(random_state = 42, ccp_alpha = ccp_alpha)
    scores = cross_val_score(clf, train_, dataset['credit'], cv = 5)
    alpha_loop.append([ccp_alpha, np.mean(scores), np.std(scores)])
df_alpha = pd.DataFrame(alpha_loop, columns = ['alpha', 'mean_accuracy', 'std'])
df_alpha.plot(x = 'alpha', y = 'mean_accuracy',
              yerr = 'std', marker = 'o', linestyle = '--')

test_data = pd.read_csv("./Test.csv")

one_hot_test = pd.get_dummies(test_data[['F10', 'F11']])
test_ = pd.concat([test_data['F1'],test_data['F2'] ,test_data['F3'], test_data['F4'],test_data['F5'], test_data['F6'] ,test_data['F7'], test_data['F8'], test_data['F9'], one_hot_test], axis =1)

# training the model based on the CCP value.
classifier = tree.DecisionTreeClassifier(ccp_alpha= 0.003)

classifier.fit(train_, dataset['credit'])

output=classifier.predict(test_)

output=output.reshape(output.size,1)

output.shape

# Writing the output in a file.
a_file = open("output.txt", "w")
for row in output:
    # np.savetxt(a_file, row)
    a_file.write(str(row[0])+"\n")

a_file.close()

